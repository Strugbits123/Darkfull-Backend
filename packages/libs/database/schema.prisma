// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  binaryTargets = ["native", "windows", "linux-musl"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Store Management Models
model Store {
  id                      String   @id @default(cuid())
  name                    String
  slug                    String   @unique
  createdBy              String   @map("created_by")
  
  // Salla Integration
  sallaStoreId           String?  @map("salla_store_id")
  sallaAccessToken       String?  @map("salla_access_token")
  sallaRefreshToken      String?  @map("salla_refresh_token")
  sallaAccessTokenExpireAt String? @map("salla_access_token_expire_at")
  sallaClientId          String?  @map("salla_client_id")
  sallaClientSecret      String?  @map("salla_client_secret")
  sallaConnectedAt       DateTime? @map("salla_connected_at")
  
  isActive               Boolean  @default(true) @map("is_active")
  createdAt              DateTime @default(now()) @map("created_at")
  updatedAt              DateTime @updatedAt @map("updated_at")
  
  // Relations
  users                  User[]
  warehouses            Warehouse[]
  invitations           Invitation[]
  creator               User     @relation("StoreCreator", fields: [createdBy], references: [id])
  
  @@map("stores")
}

// Warehouse Management Models
model Warehouse {
  id          String   @id @default(cuid())
  name        String
  code        String   @unique
  storeId     String   @map("store_id")
  address     String?
  city        String?
  country     String?
  postalCode  String?  @map("postal_code")
  phone       String?
  managerId   String?  @map("manager_id")
  isActive    Boolean  @default(true) @map("is_active")
  
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")
  
  // Relations
  store       Store @relation(fields: [storeId], references: [id], onDelete: Cascade)
  manager     User? @relation("WarehouseManager", fields: [managerId], references: [id])
  users       User[]
  invitations Invitation[]
  
  @@map("warehouses")
}

// User Management Models
model User {
  id        String   @id @default(cuid())
  email     String   @unique
  phone     String?  @unique
  password  String?
  fullName  String?  @map("full_name")
  firstName String?  @map("first_name")
  lastName  String?  @map("last_name")
  avatar    String?
  
  // Status and Role
  status      UserStatus @default(PENDING)
  role        UserRole   @default(USER)
  storeId     String?    @map("store_id")
  warehouseId String?    @map("warehouse_id")
  invitedBy   String?    @map("invited_by")
  
  // Timestamps
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  lastLogin DateTime? @map("last_login")
  
  // Email verification
  emailVerified Boolean @default(false) @map("email_verified")
  emailVerifiedAt DateTime? @map("email_verified_at")
  
  // Phone verification
  phoneVerified Boolean @default(false) @map("phone_verified")
  phoneVerifiedAt DateTime? @map("phone_verified_at")
  
  // Password reset
  passwordResetAt DateTime? @map("password_reset_at")
  
  // Relations
  otps              Otp[]
  sessions          Session[]
  userRoles         UserRoleMapping[]
  auditLogs         AuditLog[]
  
  // Store and warehouse relations
  store             Store?      @relation(fields: [storeId], references: [id])
  warehouse         Warehouse?  @relation(fields: [warehouseId], references: [id])
  inviter           User?       @relation("UserInvitations", fields: [invitedBy], references: [id])
  invitedUsers      User[]      @relation("UserInvitations")
  
  // Store creator relation
  createdStores     Store[]     @relation("StoreCreator")
  managedWarehouses Warehouse[] @relation("WarehouseManager")
  
  // Invitation relations
  sentInvitations     Invitation[] @relation("InvitationSender")
  receivedInvitations Invitation[] @relation("InvitationReceiver")
  
  @@map("users")
}

// Invitation Management Models
model Invitation {
  id          String            @id @default(cuid())
  email       String
  token       String            @unique
  role        UserRole
  storeId     String            @map("store_id")
  warehouseId String?           @map("warehouse_id")
  invitedBy   String            @map("invited_by")
  permissions Json?             @default("{}")
  status      InvitationStatus  @default(PENDING)
  expiresAt   DateTime          @map("expires_at")
  acceptedAt  DateTime?         @map("accepted_at")
  userId      String?           @map("user_id")
  
  createdAt   DateTime          @default(now()) @map("created_at")
  updatedAt   DateTime          @updatedAt @map("updated_at")
  
  // Relations
  store       Store     @relation(fields: [storeId], references: [id], onDelete: Cascade)
  warehouse   Warehouse? @relation(fields: [warehouseId], references: [id])
  inviter     User      @relation("InvitationSender", fields: [invitedBy], references: [id])
  user        User?     @relation("InvitationReceiver", fields: [userId], references: [id])
  
  @@map("invitations")
}

model Role {
  id          String   @id @default(cuid())
  name        String   @unique
  displayName String   @map("display_name")
  description String?
  isActive    Boolean  @default(true) @map("is_active")
  isSystem    Boolean  @default(false) @map("is_system") // System roles cannot be deleted
  
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  
  // Relations
  rolePermissions RolePermissionMapping[]
  userRoles       UserRoleMapping[]
  
  @@map("roles")
}

model Permission {
  id          String   @id @default(cuid())
  name        String   @unique
  displayName String   @map("display_name")
  description String?
  resource    String   // e.g., "user", "order", "inventory"
  action      String   // e.g., "create", "read", "update", "delete"
  isActive    Boolean  @default(true) @map("is_active")
  
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  
  // Relations
  rolePermissions RolePermissionMapping[]
  
  @@unique([resource, action])
  @@map("permissions")
}

model UserRoleMapping {
  id     String @id @default(cuid())
  userId String @map("user_id")
  roleId String @map("role_id")
  
  assignedAt DateTime @default(now()) @map("assigned_at")
  assignedBy String?  @map("assigned_by") // User ID who assigned this role
  expiresAt  DateTime? @map("expires_at") // Optional role expiration
  
  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  role Role @relation(fields: [roleId], references: [id], onDelete: Cascade)
  
  @@unique([userId, roleId])
  @@map("user_role_mappings")
}

model RolePermissionMapping {
  id           String @id @default(cuid())
  roleId       String @map("role_id")
  permissionId String @map("permission_id")
  
  assignedAt DateTime @default(now()) @map("assigned_at")
  
  // Relations
  role       Role       @relation(fields: [roleId], references: [id], onDelete: Cascade)
  permission Permission @relation(fields: [permissionId], references: [id], onDelete: Cascade)
  
  @@unique([roleId, permissionId])
  @@map("role_permission_mappings")
}



// OTP Management
model Otp {
  id        String   @id @default(cuid())
  userId    String   @map("user_id")
  type      OtpType
  code      String
  expiresAt DateTime @map("expires_at")
  attempts  Int      @default(0)
  isUsed    Boolean  @default(false) @map("is_used")
  usedAt    DateTime? @map("used_at")
  
  createdAt DateTime @default(now()) @map("created_at")
  
  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@map("otps")
}

// Session Management
model Session {
  id            String   @id @default(cuid())
  userId        String   @map("user_id")
  refreshToken  String   @unique @map("refresh_token")
  accessToken   String   @map("access_token")
  isActive      Boolean  @default(true) @map("is_active")
  expiresAt     DateTime @map("expires_at")
  
  // Device and location info
  userAgent     String?  @map("user_agent")
  ipAddress     String?  @map("ip_address")
  deviceType    String?  @map("device_type")
  location      String?
  
  createdAt     DateTime @default(now()) @map("created_at")
  updatedAt     DateTime @updatedAt @map("updated_at")
  lastAccessAt  DateTime @default(now()) @map("last_access_at")
  
  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@map("sessions")
}

// Audit Trail
model AuditLog {
  id          String   @id @default(cuid())
  userId      String?  @map("user_id")
  action      String   // Action performed
  resource    String   // Resource affected
  resourceId  String?  @map("resource_id")
  oldValues   Json?    @map("old_values")
  newValues   Json?    @map("new_values")
  ipAddress   String?  @map("ip_address")
  userAgent   String?  @map("user_agent")
  
  createdAt   DateTime @default(now()) @map("created_at")
  
  // Relations
  user User? @relation(fields: [userId], references: [id], onDelete: SetNull)
  
  @@map("audit_logs")
}

// System Configuration
model SystemConfig {
  id          String   @id @default(cuid())
  key         String   @unique
  value       String
  description String?
  isActive    Boolean  @default(true) @map("is_active")
  
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")
  
  @@map("system_configs")
}

// Notification Management
model NotificationTemplate {
  id          String   @id @default(cuid())
  name        String   @unique
  type        NotificationType
  subject     String?  // For email notifications
  content     String
  variables   Json?    // Template variables
  isActive    Boolean  @default(true) @map("is_active")
  
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")
  
  // Relations
  notifications Notification[]
  
  @@map("notification_templates")
}

model Notification {
  id         String           @id @default(cuid())
  userId     String?          @map("user_id")
  templateId String?          @map("template_id")
  type       NotificationType
  channel    NotificationChannel
  
  // Content
  subject    String?
  content    String
  data       Json?            // Additional data
  
  // Delivery
  recipient  String           // Email, phone, etc.
  status     NotificationStatus @default(PENDING)
  sentAt     DateTime?        @map("sent_at")
  readAt     DateTime?        @map("read_at")
  
  // Metadata
  priority   NotificationPriority @default(NORMAL)
  retryCount Int              @default(0) @map("retry_count")
  maxRetries Int              @default(3) @map("max_retries")
  
  createdAt  DateTime         @default(now()) @map("created_at")
  updatedAt  DateTime         @updatedAt @map("updated_at")
  
  // Relations
  template NotificationTemplate? @relation(fields: [templateId], references: [id], onDelete: SetNull)
  
  @@map("notifications")
}

// Enums
enum UserStatus {
  PENDING
  ACTIVE
  INACTIVE
  SUSPENDED
  DELETED
}

enum UserRole {
  SUPER_ADMIN
  STORE_ADMIN
  DIRECTOR
  MANAGER
  RECEIVER
  PICKER
  PACKER
  SHIPPER
  USER
}

enum InvitationStatus {
  PENDING
  ACCEPTED
  EXPIRED
  CANCELLED
}

enum OtpType {
  EMAIL_VERIFICATION
  PHONE_VERIFICATION
  PASSWORD_RESET
  LOGIN_VERIFICATION
  TWO_FACTOR_AUTH
}

enum NotificationType {
  EMAIL
  SMS
  PUSH
  IN_APP
  WEBHOOK
}

enum NotificationChannel {
  EMAIL
  SMS
  PUSH
  IN_APP
  WEBHOOK
}

enum NotificationStatus {
  PENDING
  SENT
  DELIVERED
  READ
  FAILED
  CANCELLED
}

enum NotificationPriority {
  LOW
  NORMAL
  HIGH
  URGENT
}